AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudFormations template to support infrastructure creation in 
  AWS for PowerDNS POC, Phase 1.  It creates the following:
  - Network for DNS servers
  - Network for Slaves / Clients
  - PowerDNS Server
  - Public-facing IP address for testing

Outputs:
    IPAddr:
        Value:
            Fn::GetAtt:
                - DNSMasterInstance
                - PublicIp
        Description: The Public IP address of the DNS Master

Parameters:
    SSHLocation:
        Description: >
          The IP address range that can be used to SSH to the EC2 
          instances
        Type: String
        MinLength: 9
        MaxLength: 18
        Default: 0.0.0.0/0
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    SubnetConfig:
        VPC:
            CIDR: 10.0.0.0/16
        Public:
            CIDR: 10.0.0.0/24
        Private:
            CIDR: 10.0.1.0/24    
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 
                Fn::FindInMap:
                    - SubnetConfig
                    - VPC
                    - CIDR
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
                - Key: Name
                  Value: poc-dns1-vpc
                
    Subnet:
        Type: AWS::EC2::Subnet   
        Properties:
            VpcId: 
                Ref: VPC
            CidrBlock: 
                Fn::FindInMap: 
                    - SubnetConfig
                    - Public
                    - CIDR
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId:
                Ref: VPC
            InternetGatewayId:
                Ref: InternetGateway
    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    Route:
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            RouteTableId:
                Ref: RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: 
                Ref: InternetGateway
    SubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: Subnet
            RouteTableId:
                Ref: RouteTable
    NetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    InboundHTTPNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange: 
                From: 80
                To: 80
    InboundSSHNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 101
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 22
                To: 22
    InboundResponsePortsNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 102
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
    OutBoundHTTPNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 80
                To: 80
    OutBoundHTTPSNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 101
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443
    OutBoundResponsePortsNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: NetworkAcl
            RuleNumber: 102
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
    SubnetNetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId:
                Ref: Subnet
            NetworkAclId:
                Ref: NetworkAcl
    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock: 
                Fn::FindInMap:
                    - SubnetConfig
                    - Private
                    - CIDR
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
            
    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId:
                Ref: PrivateSubnet
            RouteTableId:
                Ref: PrivateRouteTable
    PrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId:
                Ref: PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId:
                Ref: NATDevice
    PrivateNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
    InboundPrivateNetworkAclEntry:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                Ref: PrivateNetworkAcl
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 0
                To: 65535
    OutboundPrivateNetworkAclEntry:
            Type: AWS::EC2::NetworkAclEntry
            Properties:
                NetworkAclId:
                    Ref: PrivateNetworkAcl
                RuleNumber: 100
                Protocol: 6
                RuleAction: allow
                Egress: true
                CidrBlock: 0.0.0.0/0
                PortRange:
                    From: 0
                    To: 65535
    PrivateSubnetNetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId:
                Ref: PrivateSubnet
            NetworkAclId:
                Ref: PrivateNetworkAcl
    
    IPAddress:
        Type: AWS::EC2::EIP
        DependsOn: AttachGateway
        Properties:
            Domain: vpc
            InstanceId:
                Ref: DNSMasterInstance
    InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                Ref: VPC
            GroupDescription: Enable SSH Port 22
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp:
                      Ref: SSHLocation
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
    DNSMasterInstance:
        Type: AWS::EC2::Instance
        DependsOn: AttachGateway
        Properties:
            ImageId: ami-7cbb4805
            KeyName: ewi09-aws-powerdns
            InstanceType: m3.medium
            Tags:
                - Key: Name
                  Value: poc-dns1-master
                - Key: Owner
                  Value: OTT DevOps
                - Key: Application
                  Value: 
                      Ref: AWS::StackId
            NetworkInterfaces:
                - GroupSet:
                    - Ref: InstanceSecurityGroup
                  AssociatePublicIpAddress: true
                  DeviceIndex: 0
                  DeleteOnTermination: true
                  SubnetId:
                      Ref: Subnet
